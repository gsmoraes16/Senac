/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.convercao;

/**
 *
 * @author Aluno
 */
public class Formulario extends javax.swing.JFrame {

    /**
     * Creates new form Formulario
     */
    public Formulario() {
        initComponents();
    }
    
    Double resultado;
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        valorInicial = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnConvert = new javax.swing.JButton();
        valorFinal = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Comprimento");

        jLabel2.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel2.setText("Quero converter:");

        jLabel3.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("De:");

        jLabel4.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("Para:");

        btnConvert.setFont(new java.awt.Font("Arial", 3, 16)); // NOI18N
        btnConvert.setText("Converter");
        btnConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertActionPerformed(evt);
            }
        });

        valorFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valorFinalActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Quilomêtro (KM)", "Metro (M)", "Decímetro (DM)", "Centímetro (CM)", "Milímetro (MM)" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Quilomêtro (KM)", "Metro (M)", "Decímetro (DM)", "Centímetro (CM)", "Milímetro (MM)" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valorInicial)
                    .addComponent(valorFinal)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 162, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(btnConvert)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(29, 29, 29)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(valorInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addComponent(btnConvert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(valorFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void valorFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valorFinalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_valorFinalActionPerformed

    private void btnConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertActionPerformed
        // TODO add your handling code here:
        
        String medida1 = jComboBox1.getSelectedItem().toString();
        String medida2 = jComboBox2.getSelectedItem().toString();
        
      //Medida DE km  
        if(medida1 == "Quilomêtro (KM)" && medida2 == "Quilomêtro (KM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 1;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Quilomêtro (KM)" && medida2 == "Metro (M)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 1000;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Quilomêtro (KM)" && medida2 == "Decímetro (DM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 10000;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Quilomêtro (KM)" && medida2 == "Centímetro (CM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 100000;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Quilomêtro (KM)" && medida2 == "Milímetro (MM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 1e+6;
            valorFinal.setText(String.valueOf(resultado));
        }
     
      //Medida DE m
         if(medida1 == "Metro (M)" && medida2 == "Metro (M)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 1;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Metro (M)" && medida2 == "Quilomêtro (KM)"){
            resultado = Double.parseDouble(valorInicial.getText()) / 1000;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Metro (M)" && medida2 == "Decímetro (DM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 10;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Metro (M)" && medida2 == "Centímetro (CM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 100;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Metro (M)" && medida2 == "Milímetro (MM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 1000;
            valorFinal.setText(String.valueOf(resultado));
        }
         
       //Medida DE dm
         if(medida1 == "Decímetro (DM)" && medida2 == "Decímetro (DM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 1;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Decímetro (DM)" && medida2 == "Quilomêtro (KM)"){
            resultado = Double.parseDouble(valorInicial.getText()) / 10000;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Decímetro (DM)" && medida2 == "Metro (M)"){
            resultado = Double.parseDouble(valorInicial.getText()) / 10;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Decímetro (DM)" && medida2 == "Centímetro (CM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 10;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Decímetro (DM)" && medida2 == "Milímetro (MM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 100;
            valorFinal.setText(String.valueOf(resultado));
        }
         
       //Medida DE cm
         if(medida1 == "Centímetro (CM)" && medida2 == "Centímetro (CM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 1;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Centímetro (CM)" && medida2 == "Quilomêtro (KM)"){
            resultado = Double.parseDouble(valorInicial.getText()) / 1e-5;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Centímetro (CM)" && medida2 == "Metro (M)"){
            resultado = Double.parseDouble(valorInicial.getText()) / 100;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Centímetro (CM)" && medida2 == "Decímetro (DM)"){
            resultado = Double.parseDouble(valorInicial.getText()) / 10;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Centímetro (CM)" && medida2 == "Milímetro (MM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 10;
            valorFinal.setText(String.valueOf(resultado));
        }
         
       //Medida DE mm
         if(medida1 == "Milímetro (MM)" && medida2 == "Milímetro (MM)"){
            resultado = Double.parseDouble(valorInicial.getText()) * 1;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Milímetro (MM)" && medida2 == "Quilomêtro (KM)"){
            resultado = Double.parseDouble(valorInicial.getText()) / 1e+6;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Milímetro (MM)" && medida2 == "Metro (M)"){
            resultado = Double.parseDouble(valorInicial.getText()) / 1000;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Milímetro (MM)" && medida2 == "Decímetro (DM)"){
            resultado = Double.parseDouble(valorInicial.getText()) / 100;
            valorFinal.setText(String.valueOf(resultado));
        }
        else if(medida1 == "Milímetro (MM)" && medida2 == "Centímetro (CM)"){
            resultado = Double.parseDouble(valorInicial.getText()) / 10;
            valorFinal.setText(String.valueOf(resultado));
        }   
        
    }//GEN-LAST:event_btnConvertActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Formulario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvert;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField valorFinal;
    private javax.swing.JTextField valorInicial;
    // End of variables declaration//GEN-END:variables
}
